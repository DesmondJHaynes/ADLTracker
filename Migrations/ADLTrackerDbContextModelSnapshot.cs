// <auto-generated />
using System;
using ADLTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ADLTracker.Migrations
{
    [DbContext(typeof(ADLTrackerDbContext))]
    partial class ADLTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ADLTracker.Models.AssistType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Simple")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssistTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Simple = "IND",
                            Type = "Independent"
                        },
                        new
                        {
                            Id = 2,
                            Simple = "SBA",
                            Type = "Stand-by Assist"
                        },
                        new
                        {
                            Id = 3,
                            Simple = "x1",
                            Type = "1 Assist"
                        },
                        new
                        {
                            Id = 4,
                            Simple = "x2+",
                            Type = "Total Assist"
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.ContactPrecaution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Diagram")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactPrecautions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            Diagram = "https://www.brevis.com/image/lg/cpr7r2.jpg",
                            Type = "Contact"
                        },
                        new
                        {
                            Id = 3,
                            Diagram = "https://brevis.com/images/cprmdro.jpg",
                            Type = "Contact+"
                        },
                        new
                        {
                            Id = 4,
                            Diagram = "https://brevis.com/images/dpr14.jpg",
                            Type = "Droplet"
                        },
                        new
                        {
                            Id = 5,
                            Diagram = "https://www.brevis.com/image/lg/apr20.jpg",
                            Type = "Airborne"
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Simple")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Simple = "M",
                            Type = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Simple = "F",
                            Type = "Female"
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.Intake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IntakeAmount")
                        .HasColumnType("integer");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeRecorded")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Intakes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IntakeAmount = 240,
                            PatientProfileId = 1,
                            TimeRecorded = new DateTime(2023, 10, 16, 5, 8, 49, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            IntakeAmount = 500,
                            PatientProfileId = 2,
                            TimeRecorded = new DateTime(2023, 10, 15, 3, 25, 37, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            IntakeAmount = 350,
                            PatientProfileId = 3,
                            TimeRecorded = new DateTime(2023, 10, 16, 9, 19, 9, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            IntakeAmount = 125,
                            PatientProfileId = 4,
                            TimeRecorded = new DateTime(2023, 10, 16, 20, 26, 47, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.Output", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OutputAmount")
                        .HasColumnType("integer");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeRecorded")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Outputs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OutputAmount = 50,
                            PatientProfileId = 1,
                            TimeRecorded = new DateTime(2023, 10, 16, 5, 8, 49, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            OutputAmount = 64,
                            PatientProfileId = 2,
                            TimeRecorded = new DateTime(2023, 10, 15, 3, 25, 37, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            OutputAmount = 51,
                            PatientProfileId = 3,
                            TimeRecorded = new DateTime(2023, 10, 16, 9, 19, 9, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            OutputAmount = 64,
                            PatientProfileId = 4,
                            TimeRecorded = new DateTime(2023, 10, 16, 20, 26, 47, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DOB = new DateOnly(1977, 9, 19),
                            FirstName = "Bryanty",
                            GenderId = 1,
                            LastName = "Luckett"
                        },
                        new
                        {
                            Id = 2,
                            DOB = new DateOnly(1986, 12, 2),
                            FirstName = "Alanson",
                            GenderId = 2,
                            LastName = "Surpliss"
                        },
                        new
                        {
                            Id = 3,
                            DOB = new DateOnly(1961, 2, 10),
                            FirstName = "Marquita",
                            GenderId = 2,
                            LastName = "Gabbotts"
                        },
                        new
                        {
                            Id = 4,
                            DOB = new DateOnly(1959, 9, 13),
                            FirstName = "Ashlie",
                            GenderId = 2,
                            LastName = "Bertouloume"
                        },
                        new
                        {
                            Id = 5,
                            DOB = new DateOnly(1999, 5, 1),
                            FirstName = "Matias",
                            GenderId = 1,
                            LastName = "Jannings"
                        },
                        new
                        {
                            Id = 6,
                            DOB = new DateOnly(1949, 7, 11),
                            FirstName = "Harley",
                            GenderId = 1,
                            LastName = "Dreger"
                        },
                        new
                        {
                            Id = 7,
                            DOB = new DateOnly(1986, 5, 17),
                            FirstName = "Marlin",
                            GenderId = 1,
                            LastName = "Briddock"
                        },
                        new
                        {
                            Id = 8,
                            DOB = new DateOnly(1982, 8, 7),
                            FirstName = "Sheffy",
                            GenderId = 2,
                            LastName = "McVeighty"
                        },
                        new
                        {
                            Id = 9,
                            DOB = new DateOnly(1947, 10, 13),
                            FirstName = "Nata",
                            GenderId = 2,
                            LastName = "Attle"
                        },
                        new
                        {
                            Id = 10,
                            DOB = new DateOnly(1970, 1, 30),
                            FirstName = "Hodge",
                            GenderId = 1,
                            LastName = "Pilkinton"
                        },
                        new
                        {
                            Id = 11,
                            DOB = new DateOnly(1972, 7, 12),
                            FirstName = "Terrance",
                            GenderId = 1,
                            LastName = "Barthram"
                        },
                        new
                        {
                            Id = 12,
                            DOB = new DateOnly(1942, 6, 3),
                            FirstName = "Monti",
                            GenderId = 2,
                            LastName = "Rominov"
                        },
                        new
                        {
                            Id = 13,
                            DOB = new DateOnly(1950, 6, 16),
                            FirstName = "Gerik",
                            GenderId = 1,
                            LastName = "Street"
                        },
                        new
                        {
                            Id = 14,
                            DOB = new DateOnly(1952, 10, 11),
                            FirstName = "Cassaundra",
                            GenderId = 2,
                            LastName = "McKmurrie"
                        },
                        new
                        {
                            Id = 15,
                            DOB = new DateOnly(1945, 9, 26),
                            FirstName = "Panther",
                            GenderId = 2,
                            LastName = "Moons"
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.PatientProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AssistTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactPrecautionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Discharged")
                        .HasColumnType("boolean");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastBM")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastBath")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("Telemetry")
                        .HasColumnType("boolean");

                    b.Property<int?>("TelemetryNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AssistTypeId");

                    b.HasIndex("ContactPrecautionId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdmissionDate = new DateTime(2023, 10, 5, 10, 49, 43, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 2,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 77,
                            LastBM = new DateTime(2023, 10, 16, 7, 19, 10, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 8, 51, 55, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            RoomNumber = 1000,
                            Telemetry = false,
                            Weight = 44.5m
                        },
                        new
                        {
                            Id = 2,
                            AdmissionDate = new DateTime(2023, 10, 12, 6, 43, 24, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 3,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 65,
                            LastBM = new DateTime(2023, 10, 15, 4, 39, 32, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 7, 6, 2, 0, DateTimeKind.Unspecified),
                            PatientId = 2,
                            RoomNumber = 1001,
                            Telemetry = false,
                            Weight = 77.3m
                        },
                        new
                        {
                            Id = 3,
                            AdmissionDate = new DateTime(2023, 10, 7, 22, 58, 47, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 3,
                            ContactPrecautionId = 1,
                            Discharged = true,
                            Height = 61,
                            LastBM = new DateTime(2023, 10, 16, 22, 38, 27, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 9, 1, 1, 0, DateTimeKind.Unspecified),
                            PatientId = 3,
                            RoomNumber = 1002,
                            Telemetry = true,
                            TelemetryNumber = 345,
                            Weight = 78.0m
                        },
                        new
                        {
                            Id = 4,
                            AdmissionDate = new DateTime(2023, 10, 12, 19, 10, 5, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 4,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 72,
                            LastBM = new DateTime(2023, 10, 15, 5, 27, 11, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 17, 0, 37, 0, DateTimeKind.Unspecified),
                            PatientId = 4,
                            RoomNumber = 1004,
                            Telemetry = true,
                            TelemetryNumber = 123,
                            Weight = 58.8m
                        },
                        new
                        {
                            Id = 5,
                            AdmissionDate = new DateTime(2023, 10, 8, 23, 6, 18, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 4,
                            ContactPrecautionId = 1,
                            Discharged = true,
                            Height = 50,
                            LastBM = new DateTime(2023, 10, 16, 18, 28, 0, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 15, 28, 47, 0, DateTimeKind.Unspecified),
                            PatientId = 5,
                            RoomNumber = 1005,
                            Telemetry = false,
                            Weight = 46.1m
                        },
                        new
                        {
                            Id = 6,
                            AdmissionDate = new DateTime(2023, 10, 3, 11, 53, 50, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 2,
                            ContactPrecautionId = 3,
                            Discharged = false,
                            Height = 73,
                            LastBM = new DateTime(2023, 10, 15, 16, 15, 3, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 12, 51, 49, 0, DateTimeKind.Unspecified),
                            PatientId = 6,
                            RoomNumber = 1006,
                            Telemetry = true,
                            TelemetryNumber = 108,
                            Weight = 75.2m
                        },
                        new
                        {
                            Id = 7,
                            AdmissionDate = new DateTime(2023, 10, 6, 11, 59, 57, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 3,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 71,
                            LastBM = new DateTime(2023, 10, 16, 11, 33, 58, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 16, 39, 29, 0, DateTimeKind.Unspecified),
                            PatientId = 7,
                            RoomNumber = 1007,
                            Telemetry = true,
                            TelemetryNumber = 499,
                            Weight = 46.7m
                        },
                        new
                        {
                            Id = 8,
                            AdmissionDate = new DateTime(2023, 10, 9, 5, 4, 46, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 2,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 68,
                            LastBM = new DateTime(2023, 10, 15, 14, 36, 13, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 1, 5, 32, 0, DateTimeKind.Unspecified),
                            PatientId = 8,
                            RoomNumber = 1008,
                            Telemetry = false,
                            Weight = 65.3m
                        },
                        new
                        {
                            Id = 9,
                            AdmissionDate = new DateTime(2023, 10, 15, 12, 57, 27, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 3,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 59,
                            LastBM = new DateTime(2023, 10, 15, 13, 24, 56, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 22, 57, 40, 0, DateTimeKind.Unspecified),
                            PatientId = 9,
                            RoomNumber = 1009,
                            Telemetry = true,
                            TelemetryNumber = 119,
                            Weight = 75.0m
                        },
                        new
                        {
                            Id = 10,
                            AdmissionDate = new DateTime(2023, 10, 10, 4, 24, 27, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 2,
                            ContactPrecautionId = 2,
                            Discharged = false,
                            Height = 68,
                            LastBM = new DateTime(2023, 10, 16, 20, 19, 13, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 20, 40, 52, 0, DateTimeKind.Unspecified),
                            PatientId = 10,
                            RoomNumber = 1010,
                            Telemetry = false,
                            Weight = 89.6m
                        },
                        new
                        {
                            Id = 11,
                            AdmissionDate = new DateTime(2023, 10, 7, 22, 19, 45, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 2,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 52,
                            LastBM = new DateTime(2023, 10, 15, 15, 43, 9, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 3, 34, 41, 0, DateTimeKind.Unspecified),
                            PatientId = 11,
                            RoomNumber = 1011,
                            Telemetry = false,
                            Weight = 43.6m
                        },
                        new
                        {
                            Id = 12,
                            AdmissionDate = new DateTime(2023, 10, 6, 7, 16, 38, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 1,
                            ContactPrecautionId = 1,
                            Discharged = false,
                            Height = 65,
                            LastBM = new DateTime(2023, 10, 16, 20, 57, 58, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 17, 41, 3, 0, DateTimeKind.Unspecified),
                            PatientId = 12,
                            RoomNumber = 1013,
                            Telemetry = true,
                            TelemetryNumber = 501,
                            Weight = 70.4m
                        },
                        new
                        {
                            Id = 13,
                            AdmissionDate = new DateTime(2023, 10, 8, 3, 38, 11, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 2,
                            ContactPrecautionId = 1,
                            Discharged = true,
                            Height = 71,
                            LastBM = new DateTime(2023, 10, 16, 8, 35, 4, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 5, 46, 25, 0, DateTimeKind.Unspecified),
                            PatientId = 13,
                            RoomNumber = 1014,
                            Telemetry = false,
                            Weight = 69.7m
                        },
                        new
                        {
                            Id = 14,
                            AdmissionDate = new DateTime(2023, 10, 5, 0, 49, 28, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 2,
                            ContactPrecautionId = 4,
                            Discharged = false,
                            Height = 48,
                            LastBM = new DateTime(2023, 10, 15, 14, 57, 34, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 9, 32, 54, 0, DateTimeKind.Unspecified),
                            PatientId = 14,
                            RoomNumber = 1015,
                            Telemetry = false,
                            Weight = 43.2m
                        },
                        new
                        {
                            Id = 15,
                            AdmissionDate = new DateTime(2023, 10, 13, 9, 12, 23, 0, DateTimeKind.Unspecified),
                            AssistTypeId = 3,
                            ContactPrecautionId = 5,
                            Discharged = false,
                            Height = 45,
                            LastBM = new DateTime(2023, 10, 15, 21, 3, 25, 0, DateTimeKind.Unspecified),
                            LastBath = new DateTime(2023, 10, 16, 1, 31, 37, 0, DateTimeKind.Unspecified),
                            PatientId = 15,
                            RoomNumber = 1016,
                            Telemetry = true,
                            TelemetryNumber = 333,
                            Weight = 88.8m
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.PatientProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientProfileId");

                    b.HasIndex("ProviderId");

                    b.ToTable("PatientProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PatientProfileId = 1,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 2,
                            PatientProfileId = 2,
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 3,
                            PatientProfileId = 3,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 4,
                            PatientProfileId = 4,
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 5,
                            PatientProfileId = 5,
                            ProviderId = 3
                        });
                });

            modelBuilder.Entity("ADLTracker.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Bryan",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Sadman"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "James",
                            IdentityUserId = "f575a7b0-384c-4c94-abe1-945ec9d041a0",
                            LastName = "Luck"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Tiffany",
                            IdentityUserId = "ef18a47a-3a66-4ced-a1a2-75c6acf0b060",
                            LastName = "Eversnow"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Holly",
                            IdentityUserId = "555401a5-2862-4e4c-89db-b462bc2d2e1c",
                            LastName = "Beaver"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Nurse",
                            NormalizedName = "nurse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fd9c29e-753a-437a-b37f-b933fc9d4717",
                            Email = "good@nurse.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECD/gPW+yAOdynyKNAvG1qv9xPjHVd6LtoKUX/tPQqbKGSi7voG47/dygQTjrB/jzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2aadf47-5c20-49d6-9638-39921405d808",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f575a7b0-384c-4c94-abe1-945ec9d041a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd10c408-9ee5-42b0-aba9-0dfd9b4a0a4a",
                            Email = "good@tech.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHiwGVl3HLlsbaElZT+ocNbfRrnINPQHnHPYKPTmdasPDqKl/M6z8CLQgfvb5E5GzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41c92fc0-9514-4828-b28c-265578ce56b1",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ef18a47a-3a66-4ced-a1a2-75c6acf0b060",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bca05837-8000-4631-ad3a-f59060078257",
                            Email = "mid@tech.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOWfvtrCmUZ3KSuTzHuJsXtT/ghLsS+srnQAQxrjCHf8xK2G4OihfOljD/S+GMWt6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d77766d-24be-4ccf-97bc-307821ea1075",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "555401a5-2862-4e4c-89db-b462bc2d2e1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "063e9995-ac01-4c73-9488-92ea83bfd17a",
                            Email = "bad@tech.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMEYbXIosgwFJACdnKpZtlkrhHFvCTTyay3aKOk7hI/brHfI/+vwL26qB3lRvLWkMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36b4b735-d239-4ad7-aea2-5481bc766de0",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ADLTracker.Models.Patient", b =>
                {
                    b.HasOne("ADLTracker.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ADLTracker.Models.PatientProfile", b =>
                {
                    b.HasOne("ADLTracker.Models.AssistType", "AssistType")
                        .WithMany()
                        .HasForeignKey("AssistTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADLTracker.Models.ContactPrecaution", "ContactPrecaution")
                        .WithMany()
                        .HasForeignKey("ContactPrecautionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADLTracker.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssistType");

                    b.Navigation("ContactPrecaution");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ADLTracker.Models.PatientProvider", b =>
                {
                    b.HasOne("ADLTracker.Models.PatientProfile", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADLTracker.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ADLTracker.Models.Provider", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
